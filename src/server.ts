// src/server.ts
import express, { Application, Request, Response } from "express";
import mongoose from "mongoose";
import dotenv from "dotenv";
import cors from "cors";
import router from "./routes/index";
import swaggerUi from "swagger-ui-express";
import fs from "fs";
import path from "path";

// üìò Carrega vari√°veis de ambiente
dotenv.config();

// üß© Inicializa o app Express
const app: Application = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

/* -------------------------------------------------------------------------- */
/* üåê CORS din√¢mico e tipagem corrigida                                       */
/* -------------------------------------------------------------------------- */
const allowedOrigins: string[] =
  process.env.NODE_ENV === "production"
    ? [process.env.BASE_URL || ""].filter(Boolean)
    : ["http://localhost:5173", "http://127.0.0.1:5173"];

app.use(
  cors({
    origin: allowedOrigins as (string | RegExp)[], // ‚úÖ Corrige o tipo exigido
    methods: ["GET", "POST", "PUT", "PATCH", "DELETE"],
    credentials: true,
  })
);

/* -------------------------------------------------------------------------- */
/* ‚öôÔ∏è Vari√°veis principais                                                    */
/* -------------------------------------------------------------------------- */
const ENV = process.env.NODE_ENV || "development";
const PORT = Number(process.env.PORT) || 3000;
const BASE_URL: string =
  process.env.BASE_URL ||
  (ENV === "production"
    ? "https://web-production-db663.up.railway.app"
    : `http://localhost:${PORT}`);
const MONGO_URI = process.env.MONGO_URI || "";

/* -------------------------------------------------------------------------- */
/* üìò Carrega Swagger se dispon√≠vel                                           */
/* -------------------------------------------------------------------------- */
let swaggerFile: any = null;
const swaggerPath = path.resolve(__dirname, "../swagger-output.json");
if (fs.existsSync(swaggerPath)) {
  swaggerFile = require(swaggerPath);
  console.log("üìò Swagger carregado com sucesso.");
} else {
  console.warn("‚ö†Ô∏è Swagger n√£o encontrado ‚Äî ignorando documenta√ß√£o.");
}

/* -------------------------------------------------------------------------- */
/* üè† Rota raiz                                                               */
/* -------------------------------------------------------------------------- */
app.get("/", (_req: Request, res: Response) => {
  res.status(200).json({
    message: "üöÄ API do Gateway rodando com sucesso!",
    version: "2.0.0",
    environment: ENV,
    endpoints: {
      docs: "/docs",
      health: "/health",
      payments: "/api/payments",
      webhooks: "/api/webhooks",
      api: "/api",
    },
  });
});

/* -------------------------------------------------------------------------- */
/* üè• Health Check                                                            */
/* -------------------------------------------------------------------------- */
app.get("/health", (_req: Request, res: Response) => {
  res.status(200).json({
    status: "healthy",
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: ENV,
    mongodb:
      mongoose.connection.readyState === 1 ? "connected" : "disconnected",
  });
});

/* -------------------------------------------------------------------------- */
/* üìò Swagger Docs                                                            */
/* -------------------------------------------------------------------------- */
if (swaggerFile) {
  app.use("/docs", swaggerUi.serve, swaggerUi.setup(swaggerFile));
}

/* -------------------------------------------------------------------------- */
/* üåê Rotas principais                                                        */
/* -------------------------------------------------------------------------- */
app.use("/api", router);

/* -------------------------------------------------------------------------- */
/* üö® Error Handler global                                                    */
/* -------------------------------------------------------------------------- */
app.use((err: any, _req: Request, res: Response, _next: any) => {
  console.error("‚ùå Erro n√£o tratado:", err);
  res.status(500).json({
    success: false,
    message: "Erro interno do servidor",
    error: ENV === "development" ? err.message : undefined,
  });
});

/* -------------------------------------------------------------------------- */
/* üß† Inicializa√ß√£o do servidor                                               */
/* -------------------------------------------------------------------------- */
async function startServer(): Promise<void> {
  try {
    if (!MONGO_URI)
      throw new Error("‚ùå Vari√°vel MONGO_URI ausente no arquivo .env");

    console.log("üîå Conectando ao MongoDB...");
    await mongoose.connect(MONGO_URI);
    console.log("‚úÖ Conectado ao MongoDB com sucesso!");

    // üöÄ Inicializa servidor
    app.listen(PORT, () => {
      console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üöÄ KissaPagamentos Gateway v2.0                          ‚ïë
‚ïë                                                           ‚ïë
‚ïë  üåê URL: ${BASE_URL.padEnd(50, " ")}‚ïë
‚ïë  üìò Docs: ${(BASE_URL + "/docs").padEnd(47, " ")}‚ïë
‚ïë  üè• Health: ${(BASE_URL + "/health").padEnd(45, " ")}‚ïë
‚ïë  üîß Ambiente: ${ENV.padEnd(44, " ")}‚ïë
‚ïë                                                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
      `);
    });

    // ‚è∞ Agendador T+1 (somente produ√ß√£o)
    if (ENV === "production") {
      import("./scripts/dailyProofCron")
        .then(() => console.log("‚è±Ô∏è  Agendador di√°rio (T+1) ativo."))
        .catch((err) =>
          console.error("‚ö†Ô∏è  Erro ao carregar agendador di√°rio:", err)
        );
    } else {
      console.log("üß© Ambiente local detectado ‚Äî agendador desativado.");
    }
  } catch (error: any) {
    console.error("üí• Erro cr√≠tico na inicializa√ß√£o:", error.message || error);
    process.exit(1);
  }
}

// ‚ñ∂Ô∏è Execu√ß√£o
startServer();

export default app;
