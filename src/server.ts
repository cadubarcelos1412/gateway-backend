// src/server.ts
import express, { Application, Request, Response } from "express";
import mongoose from "mongoose";
import dotenv from "dotenv";
import cors from "cors";
import router from "./routes/index";
import swaggerUi from "swagger-ui-express";
import fs from "fs";
import path from "path";

// üìò Carrega vari√°veis de ambiente
dotenv.config();

// ‚öôÔ∏è Carrega o Swagger (apenas se o arquivo existir)
let swaggerFile: any = null;
const swaggerPath = path.resolve(__dirname, "../swagger-output.json");

if (fs.existsSync(swaggerPath)) {
  swaggerFile = require(swaggerPath);
  console.log("üìò Swagger carregado com sucesso.");
} else {
  console.warn("‚ö†Ô∏è  Swagger n√£o encontrado ‚Äî ignorando documenta√ß√£o.");
}

// üß© Inicializa o app Express
const app: Application = express();
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// üîß Configura√ß√µes
const PORT = process.env.PORT || 3000;
const MONGO_URI = process.env.MONGO_URI || "";

// üè† Rota raiz
app.get("/", (_req: Request, res: Response) => {
  res.status(200).json({
    message: "üöÄ API do Gateway rodando com sucesso!",
    version: "2.0.0",
    endpoints: {
      docs: "/docs",
      health: "/health",
      payments: "/api/payments",
      webhooks: "/api/webhooks",
      api: "/api"
    }
  });
});

// üè• Health check
app.get("/health", (_req: Request, res: Response) => {
  res.status(200).json({
    status: "healthy",
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || "development",
    mongodb: mongoose.connection.readyState === 1 ? "connected" : "disconnected"
  });
});

// üìò Documenta√ß√£o Swagger (somente se dispon√≠vel)
if (swaggerFile) {
  app.use("/docs", swaggerUi.serve, swaggerUi.setup(swaggerFile));
}

// üåê Rotas principais da API
app.use("/api", router);

// üö® Error handler
app.use((err: any, _req: Request, res: Response, _next: any) => {
  console.error("‚ùå Erro n√£o tratado:", err);
  res.status(500).json({
    success: false,
    message: "Erro interno do servidor",
    error: process.env.NODE_ENV === "development" ? err.message : undefined
  });
});

// üß† Fun√ß√£o principal de inicializa√ß√£o
async function startServer(): Promise<void> {
  try {
    if (!MONGO_URI) throw new Error("‚ùå Vari√°vel MONGO_URI ausente no arquivo .env");

    console.log("üîå Conectando ao MongoDB...");
    await mongoose.connect(MONGO_URI);
    console.log("‚úÖ Conectado ao MongoDB com sucesso!");

    // üöÄ Inicializa o servidor
    app.listen(PORT, () => {
      const baseUrl = process.env.BASE_URL || `http://localhost:${PORT}`;
      
      console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
      console.log('‚ïë  üöÄ KissaPagamentos Gateway v2.0              ‚ïë');
      console.log('‚ïë                                                ‚ïë');
      console.log(`‚ïë  üåê URL: ${baseUrl.padEnd(38)} ‚ïë`);
      console.log(`‚ïë  üìò Docs: ${(baseUrl + '/docs').padEnd(35)} ‚ïë`);
      console.log(`‚ïë  üè• Health: ${(baseUrl + '/health').padEnd(33)} ‚ïë`);
      console.log(`‚ïë  üîß Ambiente: ${(process.env.NODE_ENV || 'development').padEnd(31)} ‚ïë`);
      console.log('‚ïë                                                ‚ïë');
      console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
    });

    // ‚è∞ Agendador di√°rio (Proof of Settlement T+1)
    import("./scripts/dailyProofCron")
      .then(() => console.log("‚è±Ô∏è  Agendador di√°rio carregado com sucesso."))
      .catch((err) => console.error("‚ö†Ô∏è  Erro ao carregar agendador di√°rio:", err));

  } catch (error: any) {
    console.error("üí• Erro cr√≠tico na inicializa√ß√£o:", error.message || error);
    process.exit(1);
  }
}

// ‚ñ∂Ô∏è Execu√ß√£o
startServer();

export default app;
