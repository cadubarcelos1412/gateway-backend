// ğŸ“‚ src/acquirers/acquirerSelector.ts
import { PaymentMethod } from "./types";
import { ISeller } from "../models/seller.model";
import { AcquirerKey, ACQUIRER_KEYS } from "./index";

interface AcquirerSelectorInput {
  amount: number;
  method: PaymentMethod;
  seller: ISeller;
  country?: string;
}

/* -------------------------------------------------------------------------- */
/* ğŸ§  AcquirerSelector â€“ Decide qual adquirente usar para cada transaÃ§Ã£o      */
/* -------------------------------------------------------------------------- */
/**
 * ğŸ“Œ Objetivo:
 * Centralizar toda a lÃ³gica de decisÃ£o sobre qual adquirente serÃ¡ usada
 * para processar cada transaÃ§Ã£o.
 *
 * Hoje essa decisÃ£o Ã© controlada por nÃ³s (a subadquirente), mas a classe
 * jÃ¡ nasce preparada para comportar lÃ³gica dinÃ¢mica no futuro.
 */
export class AcquirerSelector {
  static resolve(input: AcquirerSelectorInput): AcquirerKey {
    const { amount, method, seller, country } = input;

    /* ---------------------------------------------------------------------- */
    /* âœ… Regra 1 â€“ Acquirer preferida configurada no seller                  */
    /* ---------------------------------------------------------------------- */
    if (
      "preferredAcquirer" in seller &&
      seller.preferredAcquirer &&
      ACQUIRER_KEYS.includes(seller.preferredAcquirer as AcquirerKey)
    ) {
      return seller.preferredAcquirer as AcquirerKey;
    }

    /* ---------------------------------------------------------------------- */
    /* âœ… Regra 2 â€“ PIX e Boleto: priorizar adquirente nacional               */
    /* ---------------------------------------------------------------------- */
    if (method === "pix" || method === "boleto") {
      return "pagarme";
    }

    /* ---------------------------------------------------------------------- */
    /* âœ… Regra 3 â€“ Valores altos: priorizar Stripe pelo antifraude           */
    /* ---------------------------------------------------------------------- */
    if (amount > 20000) {
      return "stripe";
    }

    /* ---------------------------------------------------------------------- */
    /* âœ… Regra 4 â€“ PaÃ­ses estrangeiros (se quisermos usar isso futuramente) */
    /* ---------------------------------------------------------------------- */
    if (country && country !== "BR") {
      return "stripe";
    }

    /* ---------------------------------------------------------------------- */
    /* âœ… Regra 5 â€“ Fallback padrÃ£o                                           */
    /* ---------------------------------------------------------------------- */
    return "pagarme";
  }
}
