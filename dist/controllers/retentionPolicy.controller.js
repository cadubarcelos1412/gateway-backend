"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteRetentionPolicy = exports.listRetentionPolicies = exports.upsertRetentionPolicy = void 0;
const retentionPolicy_model_1 = require("../models/retentionPolicy.model");
/* -------------------------------------------------------
üÜï Criar ou atualizar pol√≠tica de reten√ß√£o por risco
-------------------------------------------------------- */
const upsertRetentionPolicy = async (req, res) => {
    try {
        console.log("üì• Body recebido:", req.body); // üëà debug obrigat√≥rio
        let { method, riskLevel, percentage, days, active, description } = req.body;
        // ‚úÖ 1. Valida√ß√£o de campos obrigat√≥rios
        if (!method ||
            !riskLevel ||
            percentage === undefined ||
            days === undefined) {
            res.status(400).json({
                status: false,
                msg: "Campos obrigat√≥rios: 'method', 'riskLevel', 'percentage' e 'days'.",
            });
            return;
        }
        // ‚úÖ 2. Normaliza√ß√£o ‚Äì evita erros por capitaliza√ß√£o ou formato
        method = method.toLowerCase().trim();
        if (method === "creditcard")
            method = "credit_card";
        riskLevel = riskLevel.toLowerCase().trim();
        // ‚úÖ 3. Sanitiza√ß√£o e fallback
        percentage = Number(percentage);
        days = Number(days);
        active = active !== undefined ? Boolean(active) : true;
        // ‚úÖ 4. Valida√ß√£o de valores
        const validMethods = ["pix", "credit_card", "boleto"];
        if (!validMethods.includes(method)) {
            res.status(400).json({ status: false, msg: "M√©todo inv√°lido. Use: pix, credit_card ou boleto." });
            return;
        }
        const validRiskLevels = ["low", "medium", "high"];
        if (!validRiskLevels.includes(riskLevel)) {
            res.status(400).json({ status: false, msg: "N√≠vel de risco inv√°lido. Use: low, medium ou high." });
            return;
        }
        if (isNaN(percentage) || isNaN(days)) {
            res.status(400).json({ status: false, msg: "'percentage' e 'days' devem ser n√∫meros." });
            return;
        }
        if (percentage < 0 || days < 0) {
            res.status(400).json({ status: false, msg: "Valores de 'percentage' e 'days' devem ser positivos." });
            return;
        }
        // ‚úÖ 5. Cria ou atualiza a pol√≠tica espec√≠fica
        const policy = await retentionPolicy_model_1.RetentionPolicy.findOneAndUpdate({ method, riskLevel }, { percentage, days, active, description }, { new: true, upsert: true });
        res.status(200).json({
            status: true,
            msg: `‚úÖ Pol√≠tica de reten√ß√£o (${riskLevel}) para '${method}' salva com sucesso.`,
            policy,
        });
    }
    catch (error) {
        console.error("‚ùå Erro ao salvar pol√≠tica:", error?.message || error);
        res.status(500).json({
            status: false,
            msg: "Erro interno ao salvar pol√≠tica de reten√ß√£o.",
            error: error?.message || "Unknown error",
        });
    }
};
exports.upsertRetentionPolicy = upsertRetentionPolicy;
/* -------------------------------------------------------
üìú Listar todas as pol√≠ticas de reten√ß√£o
-------------------------------------------------------- */
const listRetentionPolicies = async (_req, res) => {
    try {
        const policies = await retentionPolicy_model_1.RetentionPolicy.find().sort({ method: 1, riskLevel: 1 }).lean();
        res.status(200).json({
            status: true,
            count: policies.length,
            policies,
        });
    }
    catch (error) {
        console.error("‚ùå Erro ao listar pol√≠ticas:", error?.message || error);
        res.status(500).json({
            status: false,
            msg: "Erro interno ao listar pol√≠ticas.",
        });
    }
};
exports.listRetentionPolicies = listRetentionPolicies;
/* -------------------------------------------------------
‚ùå Remover pol√≠tica de reten√ß√£o
-------------------------------------------------------- */
const deleteRetentionPolicy = async (req, res) => {
    try {
        const { method, riskLevel } = req.body;
        if (!method || !riskLevel) {
            res.status(400).json({ status: false, msg: "Informe 'method' e 'riskLevel' para remover." });
            return;
        }
        const policy = await retentionPolicy_model_1.RetentionPolicy.findOneAndDelete({ method, riskLevel });
        if (!policy) {
            res.status(404).json({ status: false, msg: "Pol√≠tica n√£o encontrada." });
            return;
        }
        res.status(200).json({
            status: true,
            msg: `‚úÖ Pol√≠tica de reten√ß√£o (${riskLevel}) para '${method}' removida com sucesso.`,
        });
    }
    catch (error) {
        console.error("‚ùå Erro ao remover pol√≠tica:", error?.message || error);
        res.status(500).json({
            status: false,
            msg: "Erro interno ao remover pol√≠tica de reten√ß√£o.",
        });
    }
};
exports.deleteRetentionPolicy = deleteRetentionPolicy;
